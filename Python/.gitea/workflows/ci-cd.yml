name: Python Container CI/CD Pipeline (Gitea)

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'Python/**'
      - '.gitea/workflows/python-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'Python/**'
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  CONTAINER_REGISTRY: gitea.example.com  # Replace with your Gitea instance
  IMAGE_NAME: python-devcontainer

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd Python
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety flake8 black isort mypy pytest-cov

      - name: Code formatting check (Black)
        run: |
          cd Python
          black --check --diff .

      - name: Import sorting check (isort)
        run: |
          cd Python
          isort --check-only --diff .

      - name: Linting (Flake8)
        run: |
          cd Python
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking (MyPy)
        run: |
          cd Python
          mypy --ignore-missing-imports --no-strict-optional scripts/

      - name: Security analysis (Bandit)
        run: |
          cd Python
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: Dependency vulnerability scan (Safety)
        run: |
          cd Python
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-python
          path: |
            Python/bandit-report.json
            Python/safety-report.json

  # Unit and Integration Testing
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd Python
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio

      - name: Create test environment file
        run: |
          cd Python
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          ENVIRONMENT=test
          EOF

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          PYTHONPATH: ${{ github.workspace }}/Python
        run: |
          cd Python
          pytest tests/ -v --cov=scripts --cov-report=xml --cov-report=html --cov-report=term

      - name: Test sync scripts functionality
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          PYTHONPATH: ${{ github.workspace }}/Python
        run: |
          cd Python
          # Test configuration template creation
          python scripts/gitea_github_sync.py --help
          # Test shell script functionality
          ./scripts/gitea-github-sync.sh --help

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-python
          path: |
            Python/htmlcov/
            Python/coverage.xml

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container for security scanning
        run: |
          cd Python
          docker build -f .devcontainer/Dockerfile -t python-devcontainer:test .

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --format json --output trivy-results.json python-devcontainer:test || true
          trivy image python-devcontainer:test

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-python
          path: trivy-results.json

  # Notebook Testing and Validation
  notebook-validation:
    name: Jupyter Notebook Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd Python
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nbval jupyter

      - name: Validate notebooks
        run: |
          cd Python
          # Find and validate all notebooks
          find notebooks/ -name "*.ipynb" -exec jupyter nbconvert --to script {} \; || true
          # Test notebooks can be executed (if any exist)
          find notebooks/ -name "*.ipynb" -exec pytest --nbval {} \; || true

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install performance testing tools
        run: |
          cd Python
          pip install -r requirements.txt
          pip install locust memory-profiler psutil

      - name: Run performance tests for sync scripts
        run: |
          cd Python
          # Create a simple performance test for sync functionality
          python -c "
          import time
          import sys
          sys.path.append('scripts')
          
          # Time script help execution
          start = time.time()
          import subprocess
          subprocess.run(['python', 'scripts/gitea_github_sync.py', '--help'], capture_output=True)
          end = time.time()
          print(f'Python script execution time: {end - start:.2f} seconds')
          
          # Basic memory usage check
          import psutil
          process = psutil.Process()
          memory_info = process.memory_info()
          print(f'Memory usage: {memory_info.rss / 1024 / 1024:.2f} MB')
          "

  # Build and Push to Gitea Container Registry
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITEA_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "tags=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "tags=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: Python
          file: Python/.devcontainer/Dockerfile
          push: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install documentation tools
        run: |
          cd Python
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme pydoc-markdown

      - name: Generate API documentation
        run: |
          cd Python
          mkdir -p docs
          # Generate documentation for sync scripts
          pydoc-markdown -p scripts -m gitea_github_sync > docs/api-reference.md || true
          
          # Create usage documentation
          echo "# Python Container Documentation" > docs/generated-docs.md
          echo "" >> docs/generated-docs.md
          echo "## Sync Scripts" >> docs/generated-docs.md
          echo "" >> docs/generated-docs.md
          python scripts/gitea_github_sync.py --help >> docs/generated-docs.md || true
          echo "" >> docs/generated-docs.md
          ./scripts/gitea-github-sync.sh --help >> docs/generated-docs.md || true

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-python
          path: Python/docs/

  # Integration Testing with Gitea Services
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd Python
          pip install -r requirements.txt

      - name: Test sync script configuration with Gitea
        env:
          # Use dummy values for testing
          GITEA_URL: ${{ env.CONTAINER_REGISTRY }}
          GITEA_TOKEN: dummy_token
          GITHUB_TOKEN: dummy_token
        run: |
          cd Python
          # Test configuration template creation and validation
          python scripts/gitea_github_sync.py --help
          ./scripts/gitea-github-sync.sh --init
          
          # Verify config files are created properly
          [ -f sync_config.yaml ] && echo "Python config template created successfully"
          [ -f sync_config.json ] && echo "Shell config template created successfully"

      - name: Test Gitea API connectivity (if configured)
        continue-on-error: true
        run: |
          cd Python
          # Test basic Gitea API connectivity
          if [ -n "${{ secrets.GITEA_TOKEN }}" ]; then
            curl -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
                 -H "Content-Type: application/json" \
                 "${{ env.CONTAINER_REGISTRY }}/api/v1/user" || true
          fi

  # Code Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security, notebook-validation]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Container Security: ${{ needs.container-security.result }}"
          echo "Notebook Validation: ${{ needs.notebook-validation.result }}"
          
          if [[ "${{ needs.code-quality.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.container-security.result }}" != "success" ]]; then
            echo "Quality gate failed!"
            exit 1
          fi
          
          echo "Quality gate passed!"

# Notification on failures
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify team of failure
        run: |
          echo "CI/CD pipeline failed for Python container"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          # Add Gitea webhook notification here if needed
          # curl -X POST "${{ secrets.WEBHOOK_URL }}" \
          #      -H "Content-Type: application/json" \
          #      -d '{"text": "Python container CI/CD failed for commit ${{ github.sha }}"}' 