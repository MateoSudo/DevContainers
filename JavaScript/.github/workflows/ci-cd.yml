name: JavaScript T3 Stack Container CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'JavaScript/**'
      - '.github/workflows/javascript-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'JavaScript/**'
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: javascript-devcontainer

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Type checking (TypeScript)
        run: |
          cd JavaScript
          npm run type-check

      - name: Linting (ESLint)
        run: |
          cd JavaScript
          npm run lint

      - name: Code formatting check (Prettier)
        run: |
          cd JavaScript
          npm run format:check

      - name: Security audit (npm audit)
        run: |
          cd JavaScript
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Security analysis (ESLint Security)
        run: |
          cd JavaScript
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json -o eslint-security.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx

      - name: Dependency vulnerability scan (Snyk)
        continue-on-error: true
        run: |
          cd JavaScript
          npx snyk test --json > snyk-results.json || true
          npx snyk test

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            JavaScript/npm-audit.json
            JavaScript/eslint-security.json
            JavaScript/snyk-results.json

  # Unit and Integration Testing
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Create test environment file
        run: |
          cd JavaScript
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          NEXTAUTH_SECRET=test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Set up database schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: |
          cd JavaScript
          npx prisma migrate deploy || npx prisma db push

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          cd JavaScript
          npm run test -- --coverage --watchAll=false

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          cd JavaScript
          npm run test:integration || true

      - name: Test sync scripts functionality
        run: |
          cd JavaScript
          # Test Node.js sync script
          node scripts/gitea-github-sync.js --help
          # Test shell script functionality
          ./scripts/gitea-github-sync.sh --help

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          cd JavaScript
          npm run build

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: JavaScript/coverage/lcov.info
          flags: javascript
          name: javascript-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            JavaScript/coverage/
            JavaScript/.next/

  # End-to-End Testing
  e2e-test:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci
          npx playwright install

      - name: Create test environment file
        run: |
          cd JavaScript
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          NEXTAUTH_SECRET=test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Set up database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: |
          cd JavaScript
          npx prisma migrate deploy || npx prisma db push

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
        run: |
          cd JavaScript
          npm run build

      - name: Start application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          PORT: 3000
        run: |
          cd JavaScript
          npm start &
          # Wait for application to start
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: |
          cd JavaScript
          npx playwright test

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: |
            JavaScript/test-results/
            JavaScript/playwright-report/

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build container for security scanning
        run: |
          cd JavaScript
          docker build -f .devcontainer/Dockerfile -t javascript-devcontainer:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'javascript-devcontainer:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout (if available)
        continue-on-error: true
        run: |
          # Install Docker Scout
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          
          # Scan the image
          docker scout cves javascript-devcontainer:test

      - name: Scan for secrets in container
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./JavaScript
          base: main
          head: HEAD

  # Performance and Load Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Create test environment file
        run: |
          cd JavaScript
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          NEXTAUTH_SECRET=test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Set up database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: |
          cd JavaScript
          npx prisma migrate deploy || npx prisma db push

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
        run: |
          cd JavaScript
          npm run build

      - name: Run Lighthouse CI
        run: |
          cd JavaScript
          npm install -g @lhci/cli
          # Start the app
          npm start &
          # Wait for app to be ready
          npx wait-on http://localhost:3000 --timeout 60000
          # Run Lighthouse
          lhci autorun || true

      - name: Bundle size analysis
        run: |
          cd JavaScript
          npx bundlesize || true

      - name: Performance test for sync scripts
        run: |
          cd JavaScript
          # Test Node.js script performance
          time node scripts/gitea-github-sync.js --help
          # Test shell script performance
          time ./scripts/gitea-github-sync.sh --help

  # Accessibility Testing
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Build application
        run: |
          cd JavaScript
          npm run build

      - name: Run accessibility tests
        run: |
          cd JavaScript
          npm install -g @axe-core/cli
          # Start the app
          npm start &
          # Wait for app to be ready
          npx wait-on http://localhost:3000 --timeout 60000
          # Run accessibility tests
          axe http://localhost:3000 --save accessibility-results.json || true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: JavaScript/accessibility-results.json

  # Deployment and Release
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: JavaScript
          file: JavaScript/.devcontainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Generate TypeScript documentation
        run: |
          cd JavaScript
          npx typedoc --out docs/api src/ || true

      - name: Generate usage documentation
        run: |
          cd JavaScript
          mkdir -p docs
          echo "# JavaScript Container Documentation" > docs/generated-docs.md
          echo "" >> docs/generated-docs.md
          echo "## Sync Scripts" >> docs/generated-docs.md
          echo "" >> docs/generated-docs.md
          node scripts/gitea-github-sync.js --help >> docs/generated-docs.md || true
          echo "" >> docs/generated-docs.md
          ./scripts/gitea-github-sync.sh --help >> docs/generated-docs.md || true

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: JavaScript/docs/

  # Integration Testing with External Services
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Test sync script configuration
        env:
          # Use dummy values for testing
          GITEA_URL: https://gitea.example.com
          GITEA_TOKEN: dummy_token
          GITHUB_TOKEN: dummy_token
        run: |
          cd JavaScript
          # Test configuration template creation and validation
          node scripts/gitea-github-sync.js --init
          ./scripts/gitea-github-sync.sh --init
          
          # Verify config files are created properly
          [ -f sync_config.json ] && echo "JavaScript config template created successfully"

# Notification on failures
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security, e2e-test]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify team of failure
        run: |
          echo "CI/CD pipeline failed for JavaScript container"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          # Add webhook notification here if needed 