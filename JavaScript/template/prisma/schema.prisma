// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/adapters/prisma
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Example Models
model Post {
    id        String  @id @default(cuid())
    title     String
    content   String? @db.Text
    published Boolean @default(false)

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    Category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?
    PostTag    PostTag[]

    @@index([authorId])
    @@index([published])
}

model Category {
    id    String @id @default(cuid())
    name  String @unique
    posts Post[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Example: Many-to-many relationship
model Tag {
    id    String    @id @default(cuid())
    name  String    @unique
    posts PostTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PostTag {
    id     String @id @default(cuid())
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId  String

    @@unique([postId, tagId])
}
