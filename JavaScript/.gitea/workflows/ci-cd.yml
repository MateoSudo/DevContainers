name: JavaScript T3 Stack Container CI/CD Pipeline (Gitea)

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'JavaScript/**'
      - '.gitea/workflows/javascript-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'JavaScript/**'
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  CONTAINER_REGISTRY: gitea.example.com  # Replace with your Gitea instance
  IMAGE_NAME: javascript-devcontainer

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Type checking (TypeScript)
        run: |
          cd JavaScript
          npm run type-check

      - name: Linting (ESLint)
        run: |
          cd JavaScript
          npm run lint

      - name: Code formatting check (Prettier)
        run: |
          cd JavaScript
          npm run format:check

      - name: Security audit (npm audit)
        run: |
          cd JavaScript
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Security analysis (ESLint Security)
        run: |
          cd JavaScript
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json -o eslint-security.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-javascript
          path: |
            JavaScript/npm-audit.json
            JavaScript/eslint-security.json

  # Unit and Integration Testing
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Create test environment file
        run: |
          cd JavaScript
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          NEXTAUTH_SECRET=test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Set up database schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: |
          cd JavaScript
          npx prisma migrate deploy || npx prisma db push

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          cd JavaScript
          npm run test -- --coverage --watchAll=false

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          cd JavaScript
          npm run test:integration || true

      - name: Test sync scripts functionality
        run: |
          cd JavaScript
          # Test Node.js sync script
          node scripts/gitea-github-sync.js --help
          # Test shell script functionality
          ./scripts/gitea-github-sync.sh --help

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          cd JavaScript
          npm run build

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-javascript
          path: |
            JavaScript/coverage/
            JavaScript/.next/

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container for security scanning
        run: |
          cd JavaScript
          docker build -f .devcontainer/Dockerfile -t javascript-devcontainer:test .

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --format json --output trivy-results.json javascript-devcontainer:test || true
          trivy image javascript-devcontainer:test

      - name: Install TruffleHog for secrets scanning
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan for secrets
        run: |
          cd JavaScript
          trufflehog filesystem . --json --output secrets-scan.json || true
          trufflehog filesystem . || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-javascript
          path: |
            trivy-results.json
            JavaScript/secrets-scan.json

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Create test environment file
        run: |
          cd JavaScript
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          NEXTAUTH_SECRET=test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Set up database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        run: |
          cd JavaScript
          npx prisma migrate deploy || npx prisma db push

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-that-is-long-enough-for-testing
          NEXTAUTH_URL: http://localhost:3000
        run: |
          cd JavaScript
          npm run build

      - name: Bundle size analysis
        run: |
          cd JavaScript
          # Analyze bundle size
          du -sh .next/ || true
          find .next/ -name "*.js" -exec wc -c {} + | sort -n | tail -10 || true

      - name: Performance test for sync scripts
        run: |
          cd JavaScript
          # Test Node.js script performance
          echo "Testing Node.js sync script performance:"
          time node scripts/gitea-github-sync.js --help
          
          # Test shell script performance
          echo "Testing shell sync script performance:"
          time ./scripts/gitea-github-sync.sh --help

  # Build and Push to Gitea Container Registry
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITEA_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "tags=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "tags=${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: JavaScript
          file: JavaScript/.devcontainer/Dockerfile
          push: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Generate TypeScript documentation
        run: |
          cd JavaScript
          npx typedoc --out docs/api src/ || true

      - name: Generate usage documentation
        run: |
          cd JavaScript
          mkdir -p docs
          echo "# JavaScript Container Documentation" > docs/generated-docs.md
          echo "" >> docs/generated-docs.md
          echo "## Sync Scripts" >> docs/generated-docs.md
          echo "" >> docs/generated-docs.md
          node scripts/gitea-github-sync.js --help >> docs/generated-docs.md || true
          echo "" >> docs/generated-docs.md
          ./scripts/gitea-github-sync.sh --help >> docs/generated-docs.md || true

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-javascript
          path: JavaScript/docs/

  # Integration Testing with Gitea Services
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Test sync script configuration with Gitea
        env:
          # Use dummy values for testing
          GITEA_URL: ${{ env.CONTAINER_REGISTRY }}
          GITEA_TOKEN: dummy_token
          GITHUB_TOKEN: dummy_token
        run: |
          cd JavaScript
          # Test configuration template creation and validation
          node scripts/gitea-github-sync.js --init
          ./scripts/gitea-github-sync.sh --init
          
          # Verify config files are created properly
          [ -f sync_config.json ] && echo "JavaScript config template created successfully"

      - name: Test Gitea API connectivity (if configured)
        continue-on-error: true
        run: |
          cd JavaScript
          # Test basic Gitea API connectivity
          if [ -n "${{ secrets.GITEA_TOKEN }}" ]; then
            curl -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
                 -H "Content-Type: application/json" \
                 "${{ env.CONTAINER_REGISTRY }}/api/v1/user" || true
          fi

  # Accessibility Testing
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd JavaScript
          npm ci

      - name: Build application
        run: |
          cd JavaScript
          npm run build

      - name: Install accessibility testing tools
        run: |
          npm install -g @axe-core/cli

      - name: Start application for accessibility testing
        run: |
          cd JavaScript
          # Start the app in background
          npm start &
          APP_PID=$!
          
          # Wait for app to be ready (with timeout)
          timeout=60
          while ! curl -f http://localhost:3000 >/dev/null 2>&1; do
            sleep 1
            timeout=$((timeout-1))
            if [ $timeout -le 0 ]; then
              echo "App failed to start within 60 seconds"
              kill $APP_PID || true
              exit 1
            fi
          done
          
          # Run accessibility tests
          axe http://localhost:3000 --save accessibility-results.json || true
          
          # Clean up
          kill $APP_PID || true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results-javascript
          path: JavaScript/accessibility-results.json

  # Code Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security, performance-test]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Container Security: ${{ needs.container-security.result }}"
          echo "Performance Test: ${{ needs.performance-test.result }}"
          
          if [[ "${{ needs.code-quality.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.container-security.result }}" != "success" ]]; then
            echo "Quality gate failed!"
            exit 1
          fi
          
          echo "Quality gate passed!"

# Notification on failures
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify team of failure
        run: |
          echo "CI/CD pipeline failed for JavaScript container"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          # Add Gitea webhook notification here if needed
          # curl -X POST "${{ secrets.WEBHOOK_URL }}" \
          #      -H "Content-Type: application/json" \
          #      -d '{"text": "JavaScript container CI/CD failed for commit ${{ github.sha }}"}' 